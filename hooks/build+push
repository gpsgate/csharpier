#!/usr/bin/env sh

# Set good defaults to allow script to be run by hand. The two variables below
# will never be used when run from within the Docker hub.
DOCKER_REPO=${DOCKER_REPO:-"efrecon/csharpier"}
SOURCE_COMMIT=${SOURCE_COMMIT:-$(git log --no-decorate|grep '^commit'|head -n 1| awk '{print $2}')}
PLATFORMS=${PLATFORMS:-"linux/amd64"}

# Minimum version of csharpier to build for.
MINVER=${MINVER:-0.18.0}

# You shouldn't really need to have to modify the following variables.
GH_PROJECT=belav/csharpier

# shellcheck disable=SC1091
. "$(dirname "$0")/reg-tags/image_api.sh"

# Login at the Docker hub to be able to access info about the image.
token=$(img_auth "$DOCKER_REPO")

_releases() {
  # Ask GH for the list of releases matching the tag pattern, then fool the sort
  # -V option to properly understand semantic versioning. Arrange for latest
  # version to be at the top. See: https://stackoverflow.com/a/40391207
  github_releases -r 'v?[0-9]+\.[0-9]+\.[0-9]+' "$1" |
    sed '/-/!{s/$/_/}' |
    sort -Vr |
    sed 's/_$//'
}

echo "============== Gettings latest releases for $GH_PROJECT at github"
_latest=
for tag in $(_releases "$GH_PROJECT"); do
  # Latest is the first tag that we encounter.
  if [ -z "$_latest" ]; then
    _latest="$tag"
  fi

  if [ "$(img_version "${tag#v}")" -ge "$(img_version "$MINVER")" ]; then
    # Get the revision out of the org.opencontainers.image.revision label, this
    # will be the label where we store information about this repo (it cannot be
    # the tag, since we tag as the base image).
    revision=$(img_labels --verbose --token "$token" -- "$DOCKER_REPO" "$tag" |
                grep "^org.opencontainers.image.revision" |
                sed -E 's/^org.opencontainers.image.revision=(.+)/\1/')
    # If the revision is different from the source commit (including empty,
    # which will happen when our version of the image does not already exist),
    # build the image, making sure we label with the git commit sha at the
    # org.opencontainers.image.revision OCI label, but using the same tag as the
    # library image.
    if [ "$revision" != "$SOURCE_COMMIT" ]; then
      echo "============== No ${DOCKER_REPO}:$tag at $SOURCE_COMMIT"
      docker buildx build \
        --platform "$PLATFORMS" \
        --build-arg CSHARPIER_VERSION="$tag" \
        --tag "${DOCKER_REPO}:$tag" \
        --label "org.opencontainers.image.revision=$SOURCE_COMMIT" \
        --push \
        .
      if [ "$tag" = "$_latest" ]; then
        echo "============== Tagging ${DOCKER_REPO}:$tag as latest"
        docker tag "${DOCKER_REPO}:$tag" "${DOCKER_REPO}:latest"
        docker push "${DOCKER_REPO}:latest"
      fi
    fi
  fi
done